// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "sheetsEditor.proto" (package "sheets", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sheets.GetPitPDFRequest
 */
export interface GetPitPDFRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 ano = 2;
     */
    ano: number;
}
/**
 * @generated from protobuf message sheets.PitAsPDF
 */
export interface PitAsPDF {
    /**
     * @generated from protobuf field: string fileName = 1;
     */
    fileName: string;
    /**
     * @generated from protobuf field: bytes pdf = 2;
     */
    pdf: Uint8Array;
}
/**
 * @generated from protobuf message sheets.GetRitPDFRequest
 */
export interface GetRitPDFRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 ano = 2;
     */
    ano: number;
}
/**
 * @generated from protobuf message sheets.RitAsPDF
 */
export interface RitAsPDF {
    /**
     * @generated from protobuf field: string fileName = 1;
     */
    fileName: string;
    /**
     * @generated from protobuf field: bytes pdf = 2;
     */
    pdf: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPitPDFRequest$Type extends MessageType<GetPitPDFRequest> {
    constructor() {
        super("sheets.GetPitPDFRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPitPDFRequest>): GetPitPDFRequest {
        const message = { userId: "", ano: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPitPDFRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPitPDFRequest): GetPitPDFRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* int32 ano */ 2:
                    message.ano = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPitPDFRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int32 ano = 2; */
        if (message.ano !== 0)
            writer.tag(2, WireType.Varint).int32(message.ano);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sheets.GetPitPDFRequest
 */
export const GetPitPDFRequest = new GetPitPDFRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PitAsPDF$Type extends MessageType<PitAsPDF> {
    constructor() {
        super("sheets.PitAsPDF", [
            { no: 1, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pdf", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PitAsPDF>): PitAsPDF {
        const message = { fileName: "", pdf: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PitAsPDF>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PitAsPDF): PitAsPDF {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fileName */ 1:
                    message.fileName = reader.string();
                    break;
                case /* bytes pdf */ 2:
                    message.pdf = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PitAsPDF, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fileName = 1; */
        if (message.fileName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileName);
        /* bytes pdf = 2; */
        if (message.pdf.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pdf);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sheets.PitAsPDF
 */
export const PitAsPDF = new PitAsPDF$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRitPDFRequest$Type extends MessageType<GetRitPDFRequest> {
    constructor() {
        super("sheets.GetRitPDFRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRitPDFRequest>): GetRitPDFRequest {
        const message = { userId: "", ano: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRitPDFRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRitPDFRequest): GetRitPDFRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* int32 ano */ 2:
                    message.ano = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRitPDFRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int32 ano = 2; */
        if (message.ano !== 0)
            writer.tag(2, WireType.Varint).int32(message.ano);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sheets.GetRitPDFRequest
 */
export const GetRitPDFRequest = new GetRitPDFRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RitAsPDF$Type extends MessageType<RitAsPDF> {
    constructor() {
        super("sheets.RitAsPDF", [
            { no: 1, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pdf", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RitAsPDF>): RitAsPDF {
        const message = { fileName: "", pdf: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RitAsPDF>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RitAsPDF): RitAsPDF {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fileName */ 1:
                    message.fileName = reader.string();
                    break;
                case /* bytes pdf */ 2:
                    message.pdf = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RitAsPDF, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fileName = 1; */
        if (message.fileName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileName);
        /* bytes pdf = 2; */
        if (message.pdf.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pdf);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sheets.RitAsPDF
 */
export const RitAsPDF = new RitAsPDF$Type();
/**
 * @generated ServiceType for protobuf service sheets.SheetsService
 */
export const SheetsService = new ServiceType("sheets.SheetsService", [
    { name: "GetPitPDF", options: {}, I: GetPitPDFRequest, O: PitAsPDF },
    { name: "GetRitPDF", options: {}, I: GetRitPDFRequest, O: RitAsPDF }
]);
