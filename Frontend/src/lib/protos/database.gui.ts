// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "database.gui.proto" (package "database.gui", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message database.gui.UserIdRequest
 */
export interface UserIdRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message database.gui.CompletarCadastroRequest
 */
export interface CompletarCadastroRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string siape = 3;
     */
    siape: string;
    /**
     * @generated from protobuf field: string dpto = 4;
     */
    dpto: string;
    /**
     * @generated from protobuf field: string vinculo = 5;
     */
    vinculo: string;
    /**
     * @generated from protobuf field: string regime = 6;
     */
    regime: string;
    /**
     * @generated from protobuf field: string reducao = 7;
     */
    reducao: string;
}
/**
 * @generated from protobuf message database.gui.UserInfo
 */
export interface UserInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: bool cadastroCompleto = 3;
     */
    cadastroCompleto: boolean;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp emailVerified = 4;
     */
    emailVerified?: Timestamp;
    /**
     * @generated from protobuf field: optional string name = 5;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string image = 6;
     */
    image?: string;
    /**
     * @generated from protobuf field: optional string siape = 7;
     */
    siape?: string;
    /**
     * @generated from protobuf field: optional string dpto = 8;
     */
    dpto?: string;
    /**
     * @generated from protobuf field: optional string vinculo = 9;
     */
    vinculo?: string;
    /**
     * @generated from protobuf field: optional string regime = 10;
     */
    regime?: string;
    /**
     * @generated from protobuf field: optional string reducao = 11;
     */
    reducao?: string;
}
/**
 * @generated from protobuf message database.gui.UpdateUserInfoRequest
 */
export interface UpdateUserInfoRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string siape = 3;
     */
    siape?: string;
    /**
     * @generated from protobuf field: optional string dpto = 4;
     */
    dpto?: string;
    /**
     * @generated from protobuf field: optional string vinculo = 5;
     */
    vinculo?: string;
    /**
     * @generated from protobuf field: optional string regime = 6;
     */
    regime?: string;
    /**
     * @generated from protobuf field: optional string reducao = 7;
     */
    reducao?: string;
}
/**
 * @generated from protobuf message database.gui.Ano
 */
export interface Ano {
    /**
     * @generated from protobuf field: int32 ano = 1;
     */
    ano: number;
    /**
     * @generated from protobuf field: bool rit = 2;
     */
    rit: boolean;
}
/**
 * @generated from protobuf message database.gui.Anos
 */
export interface Anos {
    /**
     * @generated from protobuf field: repeated database.gui.Ano anos = 1;
     */
    anos: Ano[];
}
/**
 * @generated from protobuf message database.gui.Sheet
 */
export interface Sheet {
    /**
     * @generated from protobuf field: float ch_grad = 2;
     */
    chGrad: number;
    /**
     * @generated from protobuf field: float ch_pos = 3;
     */
    chPos: number;
    /**
     * @generated from protobuf field: repeated bool ensino = 4;
     */
    ensino: boolean[];
    /**
     * @generated from protobuf field: float ch_ensino = 5;
     */
    chEnsino: number;
    /**
     * @generated from protobuf field: repeated bool pesquisa = 6;
     */
    pesquisa: boolean[];
    /**
     * @generated from protobuf field: float ch_pesquisa = 7;
     */
    chPesquisa: number;
    /**
     * @generated from protobuf field: repeated bool extensao = 8;
     */
    extensao: boolean[];
    /**
     * @generated from protobuf field: float ch_extensao = 9;
     */
    chExtensao: number;
    /**
     * @generated from protobuf field: repeated bool adm = 10;
     */
    adm: boolean[];
    /**
     * @generated from protobuf field: float ch_adm = 11;
     */
    chAdm: number;
}
/**
 * @generated from protobuf message database.gui.CreatePitRequest
 */
export interface CreatePitRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 ano = 2;
     */
    ano: number;
}
/**
 * @generated from protobuf message database.gui.GetPitRequest
 */
export interface GetPitRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 ano = 2;
     */
    ano: number;
}
/**
 * @generated from protobuf message database.gui.UpdatePitRequest
 */
export interface UpdatePitRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 ano = 2;
     */
    ano: number;
    /**
     * @generated from protobuf field: database.gui.Sheet sheet = 3;
     */
    sheet?: Sheet;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserIdRequest$Type extends MessageType<UserIdRequest> {
    constructor() {
        super("database.gui.UserIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserIdRequest>): UserIdRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserIdRequest): UserIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.UserIdRequest
 */
export const UserIdRequest = new UserIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompletarCadastroRequest$Type extends MessageType<CompletarCadastroRequest> {
    constructor() {
        super("database.gui.CompletarCadastroRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "siape", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dpto", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vinculo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "regime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reducao", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CompletarCadastroRequest>): CompletarCadastroRequest {
        const message = { id: "", name: "", siape: "", dpto: "", vinculo: "", regime: "", reducao: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompletarCadastroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompletarCadastroRequest): CompletarCadastroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string siape */ 3:
                    message.siape = reader.string();
                    break;
                case /* string dpto */ 4:
                    message.dpto = reader.string();
                    break;
                case /* string vinculo */ 5:
                    message.vinculo = reader.string();
                    break;
                case /* string regime */ 6:
                    message.regime = reader.string();
                    break;
                case /* string reducao */ 7:
                    message.reducao = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompletarCadastroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string siape = 3; */
        if (message.siape !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.siape);
        /* string dpto = 4; */
        if (message.dpto !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.dpto);
        /* string vinculo = 5; */
        if (message.vinculo !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.vinculo);
        /* string regime = 6; */
        if (message.regime !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.regime);
        /* string reducao = 7; */
        if (message.reducao !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.reducao);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.CompletarCadastroRequest
 */
export const CompletarCadastroRequest = new CompletarCadastroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType<UserInfo> {
    constructor() {
        super("database.gui.UserInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cadastroCompleto", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "emailVerified", kind: "message", T: () => Timestamp },
            { no: 5, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "siape", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "dpto", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "vinculo", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "regime", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "reducao", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfo>): UserInfo {
        const message = { id: "", email: "", cadastroCompleto: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfo): UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* bool cadastroCompleto */ 3:
                    message.cadastroCompleto = reader.bool();
                    break;
                case /* optional google.protobuf.Timestamp emailVerified */ 4:
                    message.emailVerified = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.emailVerified);
                    break;
                case /* optional string name */ 5:
                    message.name = reader.string();
                    break;
                case /* optional string image */ 6:
                    message.image = reader.string();
                    break;
                case /* optional string siape */ 7:
                    message.siape = reader.string();
                    break;
                case /* optional string dpto */ 8:
                    message.dpto = reader.string();
                    break;
                case /* optional string vinculo */ 9:
                    message.vinculo = reader.string();
                    break;
                case /* optional string regime */ 10:
                    message.regime = reader.string();
                    break;
                case /* optional string reducao */ 11:
                    message.reducao = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* bool cadastroCompleto = 3; */
        if (message.cadastroCompleto !== false)
            writer.tag(3, WireType.Varint).bool(message.cadastroCompleto);
        /* optional google.protobuf.Timestamp emailVerified = 4; */
        if (message.emailVerified)
            Timestamp.internalBinaryWrite(message.emailVerified, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string name = 5; */
        if (message.name !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* optional string image = 6; */
        if (message.image !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.image);
        /* optional string siape = 7; */
        if (message.siape !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.siape);
        /* optional string dpto = 8; */
        if (message.dpto !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.dpto);
        /* optional string vinculo = 9; */
        if (message.vinculo !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.vinculo);
        /* optional string regime = 10; */
        if (message.regime !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.regime);
        /* optional string reducao = 11; */
        if (message.reducao !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.reducao);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserInfoRequest$Type extends MessageType<UpdateUserInfoRequest> {
    constructor() {
        super("database.gui.UpdateUserInfoRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "siape", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dpto", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vinculo", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "regime", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reducao", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserInfoRequest>): UpdateUserInfoRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserInfoRequest): UpdateUserInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string siape */ 3:
                    message.siape = reader.string();
                    break;
                case /* optional string dpto */ 4:
                    message.dpto = reader.string();
                    break;
                case /* optional string vinculo */ 5:
                    message.vinculo = reader.string();
                    break;
                case /* optional string regime */ 6:
                    message.regime = reader.string();
                    break;
                case /* optional string reducao */ 7:
                    message.reducao = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string siape = 3; */
        if (message.siape !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.siape);
        /* optional string dpto = 4; */
        if (message.dpto !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.dpto);
        /* optional string vinculo = 5; */
        if (message.vinculo !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.vinculo);
        /* optional string regime = 6; */
        if (message.regime !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.regime);
        /* optional string reducao = 7; */
        if (message.reducao !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.reducao);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.UpdateUserInfoRequest
 */
export const UpdateUserInfoRequest = new UpdateUserInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ano$Type extends MessageType<Ano> {
    constructor() {
        super("database.gui.Ano", [
            { no: 1, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Ano>): Ano {
        const message = { ano: 0, rit: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Ano>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ano): Ano {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ano */ 1:
                    message.ano = reader.int32();
                    break;
                case /* bool rit */ 2:
                    message.rit = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ano, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ano = 1; */
        if (message.ano !== 0)
            writer.tag(1, WireType.Varint).int32(message.ano);
        /* bool rit = 2; */
        if (message.rit !== false)
            writer.tag(2, WireType.Varint).bool(message.rit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.Ano
 */
export const Ano = new Ano$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Anos$Type extends MessageType<Anos> {
    constructor() {
        super("database.gui.Anos", [
            { no: 1, name: "anos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Ano }
        ]);
    }
    create(value?: PartialMessage<Anos>): Anos {
        const message = { anos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Anos>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Anos): Anos {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated database.gui.Ano anos */ 1:
                    message.anos.push(Ano.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Anos, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated database.gui.Ano anos = 1; */
        for (let i = 0; i < message.anos.length; i++)
            Ano.internalBinaryWrite(message.anos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.Anos
 */
export const Anos = new Anos$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sheet$Type extends MessageType<Sheet> {
    constructor() {
        super("database.gui.Sheet", [
            { no: 2, name: "ch_grad", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "ch_pos", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "ensino", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "ch_ensino", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "pesquisa", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "ch_pesquisa", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "extensao", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "ch_extensao", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "adm", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ch_adm", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Sheet>): Sheet {
        const message = { chGrad: 0, chPos: 0, ensino: [], chEnsino: 0, pesquisa: [], chPesquisa: 0, extensao: [], chExtensao: 0, adm: [], chAdm: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Sheet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sheet): Sheet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float ch_grad */ 2:
                    message.chGrad = reader.float();
                    break;
                case /* float ch_pos */ 3:
                    message.chPos = reader.float();
                    break;
                case /* repeated bool ensino */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ensino.push(reader.bool());
                    else
                        message.ensino.push(reader.bool());
                    break;
                case /* float ch_ensino */ 5:
                    message.chEnsino = reader.float();
                    break;
                case /* repeated bool pesquisa */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.pesquisa.push(reader.bool());
                    else
                        message.pesquisa.push(reader.bool());
                    break;
                case /* float ch_pesquisa */ 7:
                    message.chPesquisa = reader.float();
                    break;
                case /* repeated bool extensao */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.extensao.push(reader.bool());
                    else
                        message.extensao.push(reader.bool());
                    break;
                case /* float ch_extensao */ 9:
                    message.chExtensao = reader.float();
                    break;
                case /* repeated bool adm */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.adm.push(reader.bool());
                    else
                        message.adm.push(reader.bool());
                    break;
                case /* float ch_adm */ 11:
                    message.chAdm = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sheet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float ch_grad = 2; */
        if (message.chGrad !== 0)
            writer.tag(2, WireType.Bit32).float(message.chGrad);
        /* float ch_pos = 3; */
        if (message.chPos !== 0)
            writer.tag(3, WireType.Bit32).float(message.chPos);
        /* repeated bool ensino = 4; */
        if (message.ensino.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ensino.length; i++)
                writer.bool(message.ensino[i]);
            writer.join();
        }
        /* float ch_ensino = 5; */
        if (message.chEnsino !== 0)
            writer.tag(5, WireType.Bit32).float(message.chEnsino);
        /* repeated bool pesquisa = 6; */
        if (message.pesquisa.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.pesquisa.length; i++)
                writer.bool(message.pesquisa[i]);
            writer.join();
        }
        /* float ch_pesquisa = 7; */
        if (message.chPesquisa !== 0)
            writer.tag(7, WireType.Bit32).float(message.chPesquisa);
        /* repeated bool extensao = 8; */
        if (message.extensao.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.extensao.length; i++)
                writer.bool(message.extensao[i]);
            writer.join();
        }
        /* float ch_extensao = 9; */
        if (message.chExtensao !== 0)
            writer.tag(9, WireType.Bit32).float(message.chExtensao);
        /* repeated bool adm = 10; */
        if (message.adm.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.adm.length; i++)
                writer.bool(message.adm[i]);
            writer.join();
        }
        /* float ch_adm = 11; */
        if (message.chAdm !== 0)
            writer.tag(11, WireType.Bit32).float(message.chAdm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.Sheet
 */
export const Sheet = new Sheet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePitRequest$Type extends MessageType<CreatePitRequest> {
    constructor() {
        super("database.gui.CreatePitRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePitRequest>): CreatePitRequest {
        const message = { userId: "", ano: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePitRequest): CreatePitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* int32 ano */ 2:
                    message.ano = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int32 ano = 2; */
        if (message.ano !== 0)
            writer.tag(2, WireType.Varint).int32(message.ano);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.CreatePitRequest
 */
export const CreatePitRequest = new CreatePitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPitRequest$Type extends MessageType<GetPitRequest> {
    constructor() {
        super("database.gui.GetPitRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPitRequest>): GetPitRequest {
        const message = { userId: "", ano: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPitRequest): GetPitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* int32 ano */ 2:
                    message.ano = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int32 ano = 2; */
        if (message.ano !== 0)
            writer.tag(2, WireType.Varint).int32(message.ano);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.GetPitRequest
 */
export const GetPitRequest = new GetPitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePitRequest$Type extends MessageType<UpdatePitRequest> {
    constructor() {
        super("database.gui.UpdatePitRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ano", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sheet", kind: "message", T: () => Sheet }
        ]);
    }
    create(value?: PartialMessage<UpdatePitRequest>): UpdatePitRequest {
        const message = { userId: "", ano: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePitRequest): UpdatePitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* int32 ano */ 2:
                    message.ano = reader.int32();
                    break;
                case /* database.gui.Sheet sheet */ 3:
                    message.sheet = Sheet.internalBinaryRead(reader, reader.uint32(), options, message.sheet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* int32 ano = 2; */
        if (message.ano !== 0)
            writer.tag(2, WireType.Varint).int32(message.ano);
        /* database.gui.Sheet sheet = 3; */
        if (message.sheet)
            Sheet.internalBinaryWrite(message.sheet, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.gui.UpdatePitRequest
 */
export const UpdatePitRequest = new UpdatePitRequest$Type();
/**
 * @generated ServiceType for protobuf service database.gui.UserService
 */
export const UserService = new ServiceType("database.gui.UserService", [
    { name: "CompletarCadastro", options: {}, I: CompletarCadastroRequest, O: UserInfo },
    { name: "UpdateUserInfo", options: {}, I: UpdateUserInfoRequest, O: UserInfo },
    { name: "GetUserInfo", options: {}, I: UserIdRequest, O: UserInfo },
    { name: "GetAnosFromUser", options: {}, I: UserIdRequest, O: Anos }
], { "ts.server": ["GRPC1_SERVER"] });
/**
 * @generated ServiceType for protobuf service database.gui.PitService
 */
export const PitService = new ServiceType("database.gui.PitService", [
    { name: "CreatePit", options: {}, I: CreatePitRequest, O: Sheet },
    { name: "GetPit", options: {}, I: GetPitRequest, O: Sheet },
    { name: "UpdatePit", options: {}, I: UpdatePitRequest, O: Sheet }
], { "ts.server": ["GRPC1_SERVER"] });
