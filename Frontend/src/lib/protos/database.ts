// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "database.proto" (package "database.auth", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message database.auth.BasicUserResponse
 */
export interface BasicUserResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: bool cadastroCompleto = 3;
     */
    cadastroCompleto: boolean;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp emailVerified = 4;
     */
    emailVerified?: Timestamp;
    /**
     * @generated from protobuf field: optional string name = 5;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string image = 6;
     */
    image?: string;
}
/**
 * @generated from protobuf message database.auth.CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp emailVerified = 2;
     */
    emailVerified?: Timestamp;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string image = 4;
     */
    image?: string;
}
/**
 * @generated from protobuf message database.auth.GetUserRequest
 */
export interface GetUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message database.auth.GetUserByEmailRequest
 */
export interface GetUserByEmailRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
}
/**
 * @generated from protobuf message database.auth.GetUserByAccountRequest
 */
export interface GetUserByAccountRequest {
    /**
     * @generated from protobuf field: string providerAccountId = 2;
     */
    providerAccountId: string;
    /**
     * @generated from protobuf field: string provider = 3;
     */
    provider: string;
}
/**
 * @generated from protobuf message database.auth.UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional string email = 2;
     */
    email?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp emailVerified = 3;
     */
    emailVerified?: Timestamp;
    /**
     * @generated from protobuf field: optional bool cadastroCompleto = 4;
     */
    cadastroCompleto?: boolean;
    /**
     * @generated from protobuf field: optional string name = 5;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string image = 6;
     */
    image?: string;
}
/**
 * @generated from protobuf message database.auth.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message database.auth.SessionObj
 */
export interface SessionObj {
    /**
     * @generated from protobuf field: string sessionToken = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: string userId = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expires = 3;
     */
    expires?: Timestamp;
}
/**
 * @generated from protobuf message database.auth.GetSessionAndUserRequest
 */
export interface GetSessionAndUserRequest {
    /**
     * @generated from protobuf field: string sessionToken = 1;
     */
    sessionToken: string;
}
/**
 * @generated from protobuf message database.auth.GetSessionAndUserResponse
 */
export interface GetSessionAndUserResponse {
    /**
     * @generated from protobuf field: database.auth.SessionObj session = 1;
     */
    session?: SessionObj;
    /**
     * @generated from protobuf field: database.auth.BasicUserResponse user = 2;
     */
    user?: BasicUserResponse;
}
/**
 * @generated from protobuf message database.auth.UpdateSessionRequest
 */
export interface UpdateSessionRequest {
    /**
     * @generated from protobuf field: string sessionToken = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: optional string userId = 2;
     */
    userId?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expires = 3;
     */
    expires?: Timestamp;
}
/**
 * @generated from protobuf message database.auth.DeleteSessionRequest
 */
export interface DeleteSessionRequest {
    /**
     * @generated from protobuf field: string sessionToken = 1;
     */
    sessionToken: string;
}
/**
 * @generated from protobuf message database.auth.VerificationTokenObj
 */
export interface VerificationTokenObj {
    /**
     * @generated from protobuf field: string identifier = 1;
     */
    identifier: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expires = 2;
     */
    expires?: Timestamp;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
}
/**
 * @generated from protobuf message database.auth.UseVerificationTokenRequest
 */
export interface UseVerificationTokenRequest {
    /**
     * @generated from protobuf field: string identifier = 1;
     */
    identifier: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message database.auth.AdapterAccount
 */
export interface AdapterAccount {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: database.auth.ProtoProviderType type = 2;
     */
    type: ProtoProviderType;
    /**
     * @generated from protobuf field: string provider = 3;
     */
    provider: string;
    /**
     * @generated from protobuf field: string providerAccountId = 4;
     */
    providerAccountId: string;
    /**
     * @generated from protobuf field: optional string refresh_token = 5;
     */
    refreshToken?: string;
    /**
     * @generated from protobuf field: optional string access_token = 6;
     */
    accessToken?: string;
    /**
     * @generated from protobuf field: optional int32 expires_in = 7;
     */
    expiresIn?: number;
    /**
     * @generated from protobuf field: optional string token_type = 8;
     */
    tokenType?: string;
    /**
     * @generated from protobuf field: optional string scope = 9;
     */
    scope?: string;
    /**
     * @generated from protobuf field: optional string id_token = 10;
     */
    idToken?: string;
    /**
     * @generated from protobuf field: optional string session_state = 11;
     */
    sessionState?: string;
}
/**
 * @generated from protobuf message database.auth.UnlinkAccountRequest
 */
export interface UnlinkAccountRequest {
    /**
     * @generated from protobuf field: string provider = 1;
     */
    provider: string;
    /**
     * @generated from protobuf field: string providerAccountId = 2;
     */
    providerAccountId: string;
}
/**
 * @generated from protobuf enum database.auth.ProtoProviderType
 */
export enum ProtoProviderType {
    /**
     * @generated from protobuf enum value: oidc = 0;
     */
    oidc = 0,
    /**
     * @generated from protobuf enum value: oauth = 1;
     */
    oauth = 1,
    /**
     * @generated from protobuf enum value: email = 2;
     */
    email = 2,
    /**
     * @generated from protobuf enum value: credentials = 3;
     */
    credentials = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class BasicUserResponse$Type extends MessageType<BasicUserResponse> {
    constructor() {
        super("database.auth.BasicUserResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cadastroCompleto", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "emailVerified", kind: "message", T: () => Timestamp },
            { no: 5, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BasicUserResponse>): BasicUserResponse {
        const message = { id: "", email: "", cadastroCompleto: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasicUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicUserResponse): BasicUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* bool cadastroCompleto */ 3:
                    message.cadastroCompleto = reader.bool();
                    break;
                case /* optional google.protobuf.Timestamp emailVerified */ 4:
                    message.emailVerified = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.emailVerified);
                    break;
                case /* optional string name */ 5:
                    message.name = reader.string();
                    break;
                case /* optional string image */ 6:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* bool cadastroCompleto = 3; */
        if (message.cadastroCompleto !== false)
            writer.tag(3, WireType.Varint).bool(message.cadastroCompleto);
        /* optional google.protobuf.Timestamp emailVerified = 4; */
        if (message.emailVerified)
            Timestamp.internalBinaryWrite(message.emailVerified, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string name = 5; */
        if (message.name !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* optional string image = 6; */
        if (message.image !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.BasicUserResponse
 */
export const BasicUserResponse = new BasicUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserRequest$Type extends MessageType<CreateUserRequest> {
    constructor() {
        super("database.auth.CreateUserRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "emailVerified", kind: "message", T: () => Timestamp },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUserRequest>): CreateUserRequest {
        const message = { email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserRequest): CreateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* google.protobuf.Timestamp emailVerified */ 2:
                    message.emailVerified = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.emailVerified);
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string image */ 4:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* google.protobuf.Timestamp emailVerified = 2; */
        if (message.emailVerified)
            Timestamp.internalBinaryWrite(message.emailVerified, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string image = 4; */
        if (message.image !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.CreateUserRequest
 */
export const CreateUserRequest = new CreateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRequest$Type extends MessageType<GetUserRequest> {
    constructor() {
        super("database.auth.GetUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserRequest>): GetUserRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserRequest): GetUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.GetUserRequest
 */
export const GetUserRequest = new GetUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserByEmailRequest$Type extends MessageType<GetUserByEmailRequest> {
    constructor() {
        super("database.auth.GetUserByEmailRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserByEmailRequest>): GetUserByEmailRequest {
        const message = { email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserByEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserByEmailRequest): GetUserByEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserByEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.GetUserByEmailRequest
 */
export const GetUserByEmailRequest = new GetUserByEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserByAccountRequest$Type extends MessageType<GetUserByAccountRequest> {
    constructor() {
        super("database.auth.GetUserByAccountRequest", [
            { no: 2, name: "providerAccountId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserByAccountRequest>): GetUserByAccountRequest {
        const message = { providerAccountId: "", provider: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserByAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserByAccountRequest): GetUserByAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string providerAccountId */ 2:
                    message.providerAccountId = reader.string();
                    break;
                case /* string provider */ 3:
                    message.provider = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserByAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string providerAccountId = 2; */
        if (message.providerAccountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.providerAccountId);
        /* string provider = 3; */
        if (message.provider !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.provider);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.GetUserByAccountRequest
 */
export const GetUserByAccountRequest = new GetUserByAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("database.auth.UpdateUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "emailVerified", kind: "message", T: () => Timestamp },
            { no: 4, name: "cadastroCompleto", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional string email */ 2:
                    message.email = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp emailVerified */ 3:
                    message.emailVerified = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.emailVerified);
                    break;
                case /* optional bool cadastroCompleto */ 4:
                    message.cadastroCompleto = reader.bool();
                    break;
                case /* optional string name */ 5:
                    message.name = reader.string();
                    break;
                case /* optional string image */ 6:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string email = 2; */
        if (message.email !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* optional google.protobuf.Timestamp emailVerified = 3; */
        if (message.emailVerified)
            Timestamp.internalBinaryWrite(message.emailVerified, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool cadastroCompleto = 4; */
        if (message.cadastroCompleto !== undefined)
            writer.tag(4, WireType.Varint).bool(message.cadastroCompleto);
        /* optional string name = 5; */
        if (message.name !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* optional string image = 6; */
        if (message.image !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("database.auth.DeleteUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionObj$Type extends MessageType<SessionObj> {
    constructor() {
        super("database.auth.SessionObj", [
            { no: 1, name: "sessionToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expires", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SessionObj>): SessionObj {
        const message = { sessionToken: "", userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SessionObj>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionObj): SessionObj {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionToken */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* string userId */ 2:
                    message.userId = reader.string();
                    break;
                case /* google.protobuf.Timestamp expires */ 3:
                    message.expires = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expires);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionObj, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionToken = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* string userId = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* google.protobuf.Timestamp expires = 3; */
        if (message.expires)
            Timestamp.internalBinaryWrite(message.expires, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.SessionObj
 */
export const SessionObj = new SessionObj$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionAndUserRequest$Type extends MessageType<GetSessionAndUserRequest> {
    constructor() {
        super("database.auth.GetSessionAndUserRequest", [
            { no: 1, name: "sessionToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSessionAndUserRequest>): GetSessionAndUserRequest {
        const message = { sessionToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSessionAndUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionAndUserRequest): GetSessionAndUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionToken */ 1:
                    message.sessionToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionAndUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionToken = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.GetSessionAndUserRequest
 */
export const GetSessionAndUserRequest = new GetSessionAndUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionAndUserResponse$Type extends MessageType<GetSessionAndUserResponse> {
    constructor() {
        super("database.auth.GetSessionAndUserResponse", [
            { no: 1, name: "session", kind: "message", T: () => SessionObj },
            { no: 2, name: "user", kind: "message", T: () => BasicUserResponse }
        ]);
    }
    create(value?: PartialMessage<GetSessionAndUserResponse>): GetSessionAndUserResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSessionAndUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionAndUserResponse): GetSessionAndUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* database.auth.SessionObj session */ 1:
                    message.session = SessionObj.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                case /* database.auth.BasicUserResponse user */ 2:
                    message.user = BasicUserResponse.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionAndUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* database.auth.SessionObj session = 1; */
        if (message.session)
            SessionObj.internalBinaryWrite(message.session, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* database.auth.BasicUserResponse user = 2; */
        if (message.user)
            BasicUserResponse.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.GetSessionAndUserResponse
 */
export const GetSessionAndUserResponse = new GetSessionAndUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSessionRequest$Type extends MessageType<UpdateSessionRequest> {
    constructor() {
        super("database.auth.UpdateSessionRequest", [
            { no: 1, name: "sessionToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expires", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UpdateSessionRequest>): UpdateSessionRequest {
        const message = { sessionToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSessionRequest): UpdateSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionToken */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* optional string userId */ 2:
                    message.userId = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp expires */ 3:
                    message.expires = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expires);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionToken = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* optional string userId = 2; */
        if (message.userId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* optional google.protobuf.Timestamp expires = 3; */
        if (message.expires)
            Timestamp.internalBinaryWrite(message.expires, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.UpdateSessionRequest
 */
export const UpdateSessionRequest = new UpdateSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionRequest$Type extends MessageType<DeleteSessionRequest> {
    constructor() {
        super("database.auth.DeleteSessionRequest", [
            { no: 1, name: "sessionToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSessionRequest>): DeleteSessionRequest {
        const message = { sessionToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSessionRequest): DeleteSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionToken */ 1:
                    message.sessionToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionToken = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.DeleteSessionRequest
 */
export const DeleteSessionRequest = new DeleteSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerificationTokenObj$Type extends MessageType<VerificationTokenObj> {
    constructor() {
        super("database.auth.VerificationTokenObj", [
            { no: 1, name: "identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expires", kind: "message", T: () => Timestamp },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerificationTokenObj>): VerificationTokenObj {
        const message = { identifier: "", token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerificationTokenObj>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerificationTokenObj): VerificationTokenObj {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identifier */ 1:
                    message.identifier = reader.string();
                    break;
                case /* google.protobuf.Timestamp expires */ 2:
                    message.expires = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expires);
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerificationTokenObj, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identifier = 1; */
        if (message.identifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier);
        /* google.protobuf.Timestamp expires = 2; */
        if (message.expires)
            Timestamp.internalBinaryWrite(message.expires, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.VerificationTokenObj
 */
export const VerificationTokenObj = new VerificationTokenObj$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseVerificationTokenRequest$Type extends MessageType<UseVerificationTokenRequest> {
    constructor() {
        super("database.auth.UseVerificationTokenRequest", [
            { no: 1, name: "identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UseVerificationTokenRequest>): UseVerificationTokenRequest {
        const message = { identifier: "", token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseVerificationTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseVerificationTokenRequest): UseVerificationTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identifier */ 1:
                    message.identifier = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseVerificationTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identifier = 1; */
        if (message.identifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.UseVerificationTokenRequest
 */
export const UseVerificationTokenRequest = new UseVerificationTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdapterAccount$Type extends MessageType<AdapterAccount> {
    constructor() {
        super("database.auth.AdapterAccount", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["database.auth.ProtoProviderType", ProtoProviderType] },
            { no: 3, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "providerAccountId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "refresh_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "access_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "expires_in", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "token_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "scope", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "id_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "session_state", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdapterAccount>): AdapterAccount {
        const message = { userId: "", type: 0, provider: "", providerAccountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdapterAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdapterAccount): AdapterAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* database.auth.ProtoProviderType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string provider */ 3:
                    message.provider = reader.string();
                    break;
                case /* string providerAccountId */ 4:
                    message.providerAccountId = reader.string();
                    break;
                case /* optional string refresh_token */ 5:
                    message.refreshToken = reader.string();
                    break;
                case /* optional string access_token */ 6:
                    message.accessToken = reader.string();
                    break;
                case /* optional int32 expires_in */ 7:
                    message.expiresIn = reader.int32();
                    break;
                case /* optional string token_type */ 8:
                    message.tokenType = reader.string();
                    break;
                case /* optional string scope */ 9:
                    message.scope = reader.string();
                    break;
                case /* optional string id_token */ 10:
                    message.idToken = reader.string();
                    break;
                case /* optional string session_state */ 11:
                    message.sessionState = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdapterAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* database.auth.ProtoProviderType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string provider = 3; */
        if (message.provider !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.provider);
        /* string providerAccountId = 4; */
        if (message.providerAccountId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.providerAccountId);
        /* optional string refresh_token = 5; */
        if (message.refreshToken !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.refreshToken);
        /* optional string access_token = 6; */
        if (message.accessToken !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.accessToken);
        /* optional int32 expires_in = 7; */
        if (message.expiresIn !== undefined)
            writer.tag(7, WireType.Varint).int32(message.expiresIn);
        /* optional string token_type = 8; */
        if (message.tokenType !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.tokenType);
        /* optional string scope = 9; */
        if (message.scope !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.scope);
        /* optional string id_token = 10; */
        if (message.idToken !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.idToken);
        /* optional string session_state = 11; */
        if (message.sessionState !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.sessionState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.AdapterAccount
 */
export const AdapterAccount = new AdapterAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlinkAccountRequest$Type extends MessageType<UnlinkAccountRequest> {
    constructor() {
        super("database.auth.UnlinkAccountRequest", [
            { no: 1, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "providerAccountId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnlinkAccountRequest>): UnlinkAccountRequest {
        const message = { provider: "", providerAccountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlinkAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlinkAccountRequest): UnlinkAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string provider */ 1:
                    message.provider = reader.string();
                    break;
                case /* string providerAccountId */ 2:
                    message.providerAccountId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlinkAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string provider = 1; */
        if (message.provider !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.provider);
        /* string providerAccountId = 2; */
        if (message.providerAccountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.providerAccountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message database.auth.UnlinkAccountRequest
 */
export const UnlinkAccountRequest = new UnlinkAccountRequest$Type();
/**
 * @generated ServiceType for protobuf service database.auth.User
 */
export const User = new ServiceType("database.auth.User", [
    { name: "CreateUser", options: {}, I: CreateUserRequest, O: BasicUserResponse },
    { name: "GetUser", options: {}, I: GetUserRequest, O: BasicUserResponse },
    { name: "GetUserByEmail", options: {}, I: GetUserByEmailRequest, O: BasicUserResponse },
    { name: "GetUserByAccount", options: {}, I: GetUserByAccountRequest, O: BasicUserResponse },
    { name: "UpdateUser", options: {}, I: UpdateUserRequest, O: BasicUserResponse },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: BasicUserResponse }
]);
/**
 * @generated ServiceType for protobuf service database.auth.Session
 */
export const Session = new ServiceType("database.auth.Session", [
    { name: "CreateSession", options: {}, I: SessionObj, O: SessionObj },
    { name: "GetSessionAndUser", options: {}, I: GetSessionAndUserRequest, O: GetSessionAndUserResponse },
    { name: "UpdateSession", options: {}, I: UpdateSessionRequest, O: SessionObj },
    { name: "DeleteSession", options: {}, I: DeleteSessionRequest, O: SessionObj }
]);
/**
 * @generated ServiceType for protobuf service database.auth.VerificationToken
 */
export const VerificationToken = new ServiceType("database.auth.VerificationToken", [
    { name: "CreateVerificationToken", options: {}, I: VerificationTokenObj, O: VerificationTokenObj },
    { name: "useVerificationToken", options: {}, I: UseVerificationTokenRequest, O: VerificationTokenObj }
]);
/**
 * @generated ServiceType for protobuf service database.auth.Account
 */
export const Account = new ServiceType("database.auth.Account", [
    { name: "LinkAccount", options: {}, I: AdapterAccount, O: AdapterAccount },
    { name: "UnlinkAccount", options: {}, I: UnlinkAccountRequest, O: AdapterAccount }
]);
