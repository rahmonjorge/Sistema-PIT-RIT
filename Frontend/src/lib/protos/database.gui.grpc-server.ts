// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "database.gui.proto" (package "database.gui", syntax proto3)
// tslint:disable
import { UpdatePitRequest } from "./database.gui";
import { GetPitRequest } from "./database.gui";
import { Sheet } from "./database.gui";
import { CreatePitRequest } from "./database.gui";
import { Anos } from "./database.gui";
import { UserIdRequest } from "./database.gui";
import { UpdateUserInfoRequest } from "./database.gui";
import { UserInfo } from "./database.gui";
import { CompletarCadastroRequest } from "./database.gui";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service database.gui.UserService
 */
export interface IUserService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: CompletarCadastro(database.gui.CompletarCadastroRequest) returns (database.gui.UserInfo);
     */
    completarCadastro: grpc.handleUnaryCall<CompletarCadastroRequest, UserInfo>;
    /**
     * @generated from protobuf rpc: UpdateUserInfo(database.gui.UpdateUserInfoRequest) returns (database.gui.UserInfo);
     */
    updateUserInfo: grpc.handleUnaryCall<UpdateUserInfoRequest, UserInfo>;
    /**
     * @generated from protobuf rpc: GetUserInfo(database.gui.UserIdRequest) returns (database.gui.UserInfo);
     */
    getUserInfo: grpc.handleUnaryCall<UserIdRequest, UserInfo>;
    /**
     * @generated from protobuf rpc: GetAnosFromUser(database.gui.UserIdRequest) returns (database.gui.Anos);
     */
    getAnosFromUser: grpc.handleUnaryCall<UserIdRequest, Anos>;
}
/**
 * @grpc/grpc-js definition for the protobuf service database.gui.UserService.
 *
 * Usage: Implement the interface IUserService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IUserService = ...
 * server.addService(userServiceDefinition, service);
 * ```
 */
export const userServiceDefinition: grpc.ServiceDefinition<IUserService> = {
    completarCadastro: {
        path: "/database.gui.UserService/CompletarCadastro",
        originalName: "CompletarCadastro",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UserInfo.fromBinary(bytes),
        requestDeserialize: bytes => CompletarCadastroRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserInfo.toBinary(value)),
        requestSerialize: value => Buffer.from(CompletarCadastroRequest.toBinary(value))
    },
    updateUserInfo: {
        path: "/database.gui.UserService/UpdateUserInfo",
        originalName: "UpdateUserInfo",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UserInfo.fromBinary(bytes),
        requestDeserialize: bytes => UpdateUserInfoRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserInfo.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateUserInfoRequest.toBinary(value))
    },
    getUserInfo: {
        path: "/database.gui.UserService/GetUserInfo",
        originalName: "GetUserInfo",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UserInfo.fromBinary(bytes),
        requestDeserialize: bytes => UserIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UserInfo.toBinary(value)),
        requestSerialize: value => Buffer.from(UserIdRequest.toBinary(value))
    },
    getAnosFromUser: {
        path: "/database.gui.UserService/GetAnosFromUser",
        originalName: "GetAnosFromUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Anos.fromBinary(bytes),
        requestDeserialize: bytes => UserIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Anos.toBinary(value)),
        requestSerialize: value => Buffer.from(UserIdRequest.toBinary(value))
    }
};
/**
 * @generated from protobuf service database.gui.PitService
 */
export interface IPitService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: CreatePit(database.gui.CreatePitRequest) returns (database.gui.Sheet);
     */
    createPit: grpc.handleUnaryCall<CreatePitRequest, Sheet>;
    /**
     * @generated from protobuf rpc: GetPit(database.gui.GetPitRequest) returns (database.gui.Sheet);
     */
    getPit: grpc.handleUnaryCall<GetPitRequest, Sheet>;
    /**
     * @generated from protobuf rpc: UpdatePit(database.gui.UpdatePitRequest) returns (database.gui.Sheet);
     */
    updatePit: grpc.handleUnaryCall<UpdatePitRequest, Sheet>;
}
/**
 * @grpc/grpc-js definition for the protobuf service database.gui.PitService.
 *
 * Usage: Implement the interface IPitService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IPitService = ...
 * server.addService(pitServiceDefinition, service);
 * ```
 */
export const pitServiceDefinition: grpc.ServiceDefinition<IPitService> = {
    createPit: {
        path: "/database.gui.PitService/CreatePit",
        originalName: "CreatePit",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Sheet.fromBinary(bytes),
        requestDeserialize: bytes => CreatePitRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Sheet.toBinary(value)),
        requestSerialize: value => Buffer.from(CreatePitRequest.toBinary(value))
    },
    getPit: {
        path: "/database.gui.PitService/GetPit",
        originalName: "GetPit",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Sheet.fromBinary(bytes),
        requestDeserialize: bytes => GetPitRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Sheet.toBinary(value)),
        requestSerialize: value => Buffer.from(GetPitRequest.toBinary(value))
    },
    updatePit: {
        path: "/database.gui.PitService/UpdatePit",
        originalName: "UpdatePit",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Sheet.fromBinary(bytes),
        requestDeserialize: bytes => UpdatePitRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Sheet.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdatePitRequest.toBinary(value))
    }
};
